How to identify DP problem?
    DP is enhanced recursion
        1.You'd be given a choice
            if there is overlapping subproblem in the recursion then you can solve it using dp
            Should be a minimum of 2 recursion calls, in order for DP to apply
            If there is just one recursion call then DP won't apply
        2. You'd be asked optimal things like minimum or maximum

    Approach:
        Write recursive solution ---> Then memoize ---> Then write top down solution

    Parent problems in DP:
        There are a set of 10 questions in DP from which all other DP problems are derived:
            1. 0-1 Knapsack
                1. subset sum
                2. equal sum partition
                3. count of subset sum
                4. minimum subset sum
                5. target sum
                6. number of subset sum given diff
            2. Unbounded knapsack : unlike 0/1 knapsack, in this multiple occurrences of same item is allowed
                1. rod cutting
                2. coin change 1
                3. coin change 2
                4. Maximum ribbon cut
            3. Fibonacci
            4. LCS : Longest common subsequence
                1. largest common substring
                2. print lcs
                3. shortest common supersequence
                4. print scs
                5. Minimum number of insertions and deletions : a--> b
                6. longest repeating subsequence
                7. length of longest subsequence of "a" which is a substring in "b"
                8. subsequence pattern matching
                9. count how many times a appear as subsequence in "b"
                10. longest palindromic subsequence
                11. longest palindromic substring
                12. count of palindromic substring
                13. min number of deletions in a string to make it a palindrome
                14. min number of insertions in a string to make it a palindrome
            5. LIS : Longest increasing subsequence
            6. Kadane's algorithm
            7. Matrix chain multiplication
            8. DP on trees
            9. DP on grid
            10. Others


    Pseudo-code flow of any recursive function:
        1. return type
        2. base condition : to find this think of the smallest valid input
        3. choice diag

    How to convert a recursive solution into DP (memoization):
        1. See which variables in the recursive function is changing values
        2. Create a matrix of size of those variables
        3. Initialise to some constant value in all cells
        4. Change base case to check for value in the matrix, if it's there return it
        5. Store the values from recursive calls every time


    How to convert a recursive solution into tabulisation:
        1. Create a matrix of size (check the changing values in the recursive solution)
        2. Change base condition into the matrix initialisation
        3. replace n, w with i, j